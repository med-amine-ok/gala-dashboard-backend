# Generated by Django 4.2.7 on 2025-08-24 14:11

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('SUPER_ADMIN', 'Super Admin'), ('HR_ADMIN', 'HR Admin'), ('HR_MANAGER', 'HR Manager'), ('HR_ASSISTANT', 'HR Assistant'), ('EMPLOYEE', 'Employee'), ('GUEST', 'Guest')], default='EMPLOYEE', help_text='User role in the system', max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('SUSPENDED', 'Suspended'), ('PENDING', 'Pending Approval')], default='PENDING', help_text='Current status of the user account', max_length=20)),
                ('employee_id', models.CharField(blank=True, help_text='Unique employee identifier', max_length=20, null=True, unique=True)),
                ('department', models.CharField(blank=True, help_text='Department the user belongs to', max_length=100)),
                ('position', models.CharField(blank=True, help_text='Job position or title', max_length=100)),
                ('hire_date', models.DateField(blank=True, help_text='Date when the user was hired', null=True)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('address_line1', models.CharField(blank=True, help_text='Primary address line', max_length=255)),
                ('address_line2', models.CharField(blank=True, help_text='Secondary address line (optional)', max_length=255)),
                ('city', models.CharField(blank=True, help_text='City', max_length=100)),
                ('state', models.CharField(blank=True, help_text='State or province', max_length=100)),
                ('postal_code', models.CharField(blank=True, help_text='Postal or ZIP code', max_length=20)),
                ('country', models.CharField(blank=True, default='United States', help_text='Country', max_length=100)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Name of emergency contact', max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('emergency_contact_relationship', models.CharField(blank=True, help_text='Relationship to emergency contact', max_length=50)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the user email has been verified')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address of last login', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the user')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Professional biography or summary')),
                ('skills', models.JSONField(blank=True, default=list, help_text='List of skills and competencies')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='List of professional certifications')),
                ('education', models.JSONField(blank=True, default=list, help_text='Educational background')),
                ('work_experience', models.JSONField(blank=True, default=list, help_text='Previous work experience')),
                ('preferred_language', models.CharField(default='en', help_text='Preferred language for communication', max_length=10)),
                ('timezone', models.CharField(default='UTC', help_text='Preferred timezone', max_length=50)),
                ('notification_preferences', models.JSONField(blank=True, default=dict, help_text='User notification preferences')),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn profile URL')),
                ('github_url', models.URLField(blank=True, help_text='GitHub profile URL')),
                ('personal_website', models.URLField(blank=True, help_text='Personal website URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_name', models.CharField(help_text='Name of the custom permission', max_length=100)),
                ('permission_description', models.TextField(blank=True, help_text='Description of what this permission allows')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this permission is currently active')),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this permission expires (optional)', null=True)),
                ('granted_by', models.ForeignKey(blank=True, help_text='User who granted this permission', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permissions_granted', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Permission',
                'verbose_name_plural': 'User Permissions',
                'indexes': [models.Index(fields=['user', 'permission_name'], name='accounts_us_user_id_078c9a_idx'), models.Index(fields=['is_active'], name='accounts_us_is_acti_9146ce_idx')],
                'unique_together': {('user', 'permission_name')},
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='accounts_us_email_74c8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='accounts_us_role_1fa9a5_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['status'], name='accounts_us_status_6bbe13_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['department'], name='accounts_us_departm_4298b0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['employee_id'], name='accounts_us_employe_0cbd94_idx'),
        ),
    ]
